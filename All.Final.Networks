# -----------------------------
# 1) Load Required Libraries
# -----------------------------
library(igraph)
library(RedeR)
library(RTN)

# -----------------------------
# 2) Load Data
# -----------------------------
load("C:/NCA.ER/NCA.METABRIC/Final/2.MP.TF/Disc.MP.288tf/Disc.288.regulon.NA_2025-02-20.RData")
Disc.Regulon.NA <- regulon.NA
rm(regulon.NA)

load("C:/NCA.ER/NCA.METABRIC/Final/2.MP.TF/Valid.MP.314tf/Valid.314.regulon.NA_2025-02-20.RData")
Valid.Regulon.NA <- regulon.NA

pathway_data <- read.delim("C:\\NCA.ER\\NCA.METABRIC\\NCA.Disc.All.Genes\\Disc.Counts\\Pathway_Counts_PathwaySheet.txt", 
                           header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
pathway_genes <- unique(pathway_data$Gene)

# -----------------------------
# 3) Define the 5 Main TFs and Reference Data
# -----------------------------
tfs <- c("GATA3", "ESR1", "YBX1", "CBX2", "BCL11A")
data("tfsData")
tfs_ref <- tfsData$Lambert2018$SYMBOL

# -----------------------------
# 4) Build the Edge List with Robust Logic
# -----------------------------
# Create an empty edge list.
edges <- data.frame(
  TF        = character(),
  Target    = character(),
  edgeColor = character(),
  edgeStyle = character(),
  stringsAsFactors = FALSE
)

for (tf in tfs) {
  # Get targets from each dataset for this TF.
  disc_targets  <- if (tf %in% names(Disc.Regulon.NA)) names(Disc.Regulon.NA[[tf]]) else character(0)
  valid_targets <- if (tf %in% names(Valid.Regulon.NA)) names(Valid.Regulon.NA[[tf]]) else character(0)
  
  # Use the union of targets (present in either dataset)
  all_targets <- union(disc_targets, valid_targets)
  
  for (target in all_targets) {
    in_disc  <- target %in% disc_targets
    in_valid <- target %in% valid_targets
    is_common <- in_disc && in_valid  # target is common for this TF only if present in both datasets
    
    if (is_common) {
      eStyle <- "solid"
      
      # --- FIX START ---
      # Retrieve all correlation values for the target from each dataset.
      # They may return vectors if the target appears in multiple regulons.
      corr_disc_vals  <- as.numeric(Disc.Regulon.NA[[tf]][target])
      corr_valid_vals <- as.numeric(Valid.Regulon.NA[[tf]][target])
      
      # Check that all correlation values are > 0 (or < 0) in both datasets.
      # Using na.rm = TRUE ensures that NA values do not interfere.
      if (all(corr_disc_vals > 0, na.rm = TRUE) && all(corr_valid_vals > 0, na.rm = TRUE)) {
        eColor <- "lightblue3"  # Blue for positive correlations.
      } else if (all(corr_disc_vals < 0, na.rm = TRUE) && all(corr_valid_vals < 0, na.rm = TRUE)) {
        eColor <- "lightpink3"  # Red for negative correlations.
      } else {
        eColor <- "grey39"
      }
      # --- FIX END ---
      
    } else {
      eStyle <- "dashed"
      eColor <- "grey39"
    }
    
    # Add the edge to the edge list.
    edges <- rbind(
      edges,
      data.frame(
        TF = tf,
        Target = target,
        edgeColor = eColor,
        edgeStyle = eStyle,
        stringsAsFactors = FALSE
      )
    )
  }
}

# -----------------------------
# 5) Build the igraph Object
# -----------------------------
g <- graph_from_data_frame(edges, directed = FALSE)

# -----------------------------
# 6) Define Node Shapes & Colors
# -----------------------------
# Set default node attributes: targets are grey circles.
V(g)$color <- "grey"
V(g)$shape <- "circle"

# Mark TF nodes: set as squares and assign specific colors.
tf_idx <- V(g)$name %in% tfs
V(g)$shape[tf_idx] <- "square"
V(g)$shape <- ifelse(V(g)$name %in% tfs_ref, "square", "circle")
V(g)$color[V(g)$name %in% c("ESR1", "GATA3")] <- "steelblue1"
V(g)$color[V(g)$name %in% c("YBX1", "CBX2", "BCL11A")] <- "maroon"

# ---- Compute target commonality based solely on edge data ----
# For each target gene, if any edge in 'edges' is dashed, mark as non-common.
target_genes <- unique(edges$Target)
targetCommon <- sapply(target_genes, function(gene) {
  # Get all edges for this gene.
  es <- edges$edgeStyle[edges$Target == gene]
  # If any edge is dashed, the target is non-common.
  if (any(es == "dashed")) {
    return(FALSE)
  } else {
    return(TRUE)
  }
})

# Assign node color for target (non-TF) nodes.
non_tf_idx <- !(V(g)$name %in% tfs)
for (v in V(g)[non_tf_idx]$name) {
  if (v %in% names(targetCommon) && targetCommon[v]) {
    V(g)[v]$color <- "purple"
  } else {
    V(g)[v]$color <- "grey"
  }
}

# -----------------------------
# 7) Plot a Quick Preview in Base R
# -----------------------------
# Assign edge attributes for plotting.
E(g)$color <- edges$edgeColor
E(g)$lty <- as.character(edges$edgeStyle)

layout_fr <- layout_with_fr(g)
plot(
  g,
  layout = layout_fr,
  vertex.label = V(g)$name,
  vertex.label.cex = 0.7,
  vertex.label.color = "grey39",
  edge.arrow.size = 0.4,
  main = "Master Regulator Network"
)

# -----------------------------
# 8) Prepare Attributes for RedeR
# -----------------------------
# RedeR requires node shapes as "RECTANGLE" (square) and "ELLIPSE" (circle).
nodeShapeMap <- ifelse(V(g)$shape == "square", "RECTANGLE", "ELLIPSE")
V(g)$nodeShape <- nodeShapeMap

V(g)$nodeColor <- V(g)$color
# Set node sizes (TF nodes are larger).
V(g)$nodeSize <- ifelse(V(g)$name %in% tfs, 40, 25)

E(g)$edgeColor <- E(g)$color
edgeStyleMap <- ifelse(E(g)$lty == "solid", "SOLID", 
                       ifelse(E(g)$lty == "dashed", "DASHED", "LONG_DASH"))
E(g)$edgeStyle <- edgeStyleMap

# ---- FIX: Directly assign the RedeR edge attributes instead of using att.sete() ----
# This prevents the unexpected mapping that resulted in the YBX1 edge appearing green.
g <- set_edge_attr(g, "edgeLineColor", value = E(g)$edgeColor)
g <- set_edge_attr(g, "edgeLineType", value = E(g)$edgeStyle)
# -------------------------------------------------------------------------------

# -----------------------------
# 9) RedeR Visualization
# -----------------------------
rdp <- RedPort()
calld(rdp)  # Initialize RedeR
addGraph(rdp, g, layout = layout_fr)

# -----------------------------
# 10) Add Legends
# -----------------------------
addLegendToRedeR(
  rdp,
  type = "nodecolor",
  position = "bottomright",
  orientation = "vertical",
  font.size = 10,
  title = " ",
  stretch = 0,
  x = c(
    "TF (ER positive)" = "steelblue1",
    "TF (ER negative)" = "maroon",
    "Common target gene" = "purple",
    "Non-common target gene" = "grey"
  )
)

addLegendToRedeR(
  rdp,
  type = "nodeshape",
  position = "bottomleft",
  orientation = "horizontal",
  font.size = 10,
  title = " ",
  stretch = 0,
  iconDim     = 30,
  x = c("TF" = "RECTANGLE", "Target" = "ELLIPSE")
)

addLegendToRedeR(
  rdp,
  type = "edgecolor",
  position = "bottomright",
  orientation = "vertical",
  font.size = 10,
  title = " ",
  stretch = 0,
  x = c(
    "Positive in both" = "lightblue3",
    "Negative in both" = "lightpink3",
    "Non-common" = "grey39"
  )
)

# -----------------------------
# 11) Save RedeR Session if Needed
# -----------------------------
save(rdp, file = paste0("ALL.Final.network",Sys.Date(),".rda"))
save(list = ls(all =TRUE),file = paste0("ALL.Final.network",Sys.Date(),".RData"))
