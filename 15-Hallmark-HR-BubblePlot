###############################
# 1. Load required libraries and set working directory
###############################
library(dplyr)       # For data manipulation
library(tidyr)       # For reshaping data
library(openxlsx)    # For creating and writing Excel workbooks
library(survival)    # For survival analysis (Cox models)
library(tibble)      # For converting rownames to a column

# Set your working directory where your data files are stored.
setwd("E:/2.ER/3.Hallmarks/HR.Bubble.Plot/")

###############################
# 2. Read MD Data
###############################
# Read the MD file which contains discovery (D.MD) and validation (V.MD) data.
MD <- read.delim("Hallmark.MD.Common.txt", check.names = FALSE, row.names = 1, header = TRUE)

###############################
# 3. Function to Process Survival Data (ER-specific)
###############################
process_data <- function(df, er_status) {
  # Subset samples based on the provided ER status (e.g., "Positive" or "Negative")
  df_subset <- df[df$`ER Status` == er_status, ]
  
  # Define a list of survival endpoints with their corresponding time and event columns.
  endpoints <- list(
    OS  = list(time = "OS (Months)", event = "OS Status"),
    DSS = list(time = "OS (Months)", event = "DSS"),
    RFS = list(time = "RFS (Months)", event = "RFS"),
    MFS = list(time = "OS (Months)", event = "MFS")
  )
  
  # Initialize an empty list to store results for each pathway and endpoint.
  results <- list()
  
  # Loop over the endpoints (OS, DSS, RFS, MFS)
  for (endpoint in names(endpoints)) {
    time_col <- endpoints[[endpoint]]$time    # Time-to-event column
    event_col <- endpoints[[endpoint]]$event  # Event indicator column
    
    # Loop over pathway columns (assumed to be columns 8 to 57 in your dataset)
    for (pathway_col in 8:57) {
      pathway_name <- colnames(df)[pathway_col]
      
      # Subset the necessary columns: time, event, and the current pathway measure.
      combined_data <- df_subset[, c(time_col, event_col, pathway_name)]
      combined_data <- na.omit(combined_data)  # Remove rows with missing values
      
      # If no data is left after omitting NA values, issue a warning and skip this pathway.
      if (nrow(combined_data) == 0) {
        warning(paste("No valid data for pathway", pathway_name, "at endpoint:", endpoint))
        next
      }
      
      # Fit the Cox proportional hazards model using the pathway measure as predictor.
      cox_model <- coxph(Surv(combined_data[[time_col]], combined_data[[event_col]]) ~ combined_data[[pathway_name]])
      cox_summary <- summary(cox_model)
      
      # Extract the hazard ratio (HR) and corresponding p-value.
      HR <- exp(cox_summary$coefficients[1])
      Pvalue <- cox_summary$sctest[3]
      
      # Store the results in a data frame row.
      res_row <- data.frame(
        Pathway = pathway_name,
        Survival_Type = endpoint,
        HR = HR,
        Pvalue = Pvalue,
        stringsAsFactors = FALSE
      )
      
      # Save the row in the results list using a unique key.
      results[[paste0(pathway_name, "_", endpoint)]] <- res_row
    }
  }
  
  # Combine all results into a single data frame.
  results_df <- bind_rows(results)
  
  # Pivot the data frame to wide format so that each pathway is a single row with columns for each endpoint.
  results_wide <- results_df %>%
    pivot_wider(
      names_from = Survival_Type, 
      values_from = c(HR, Pvalue),
      names_sep = "_"
    ) %>%
    arrange(Pathway)
  
  return(results_wide)
}

###############################
# 4. Process Discovery and Validation Survival Data
###############################
# Read and process the discovery survival dataset.
df_disc <- read.delim("Disc.Hallmark.Surv.txt", check.names = FALSE, row.names = 1, header = TRUE)
results_Pos_disc_wide <- process_data(df_disc, "Positive")
results_Neg_disc_wide <- process_data(df_disc, "Negative")

# Read and process the validation survival dataset.
df_valid <- read.delim("Valid.Hallmark.Surv.txt", check.names = FALSE, row.names = 1, header = TRUE)
results_Pos_valid_wide <- process_data(df_valid, "Positive")
results_Neg_valid_wide <- process_data(df_valid, "Negative")

###############################
# 5. Helper Functions for Filtering and Merging Survival Data
###############################
# Helper function to filter significant results (p-value < 0.05) for a given endpoint.
filter_data <- function(wide_data, endpoint) {
  wide_data %>%
    filter(as.numeric(get(paste0("Pvalue_", endpoint))) < 0.05) %>%
    select(Pathway, starts_with(paste0("HR_", endpoint)), starts_with(paste0("Pvalue_", endpoint)))
}

# Function to merge discovery and validation results by pathway for a given endpoint.
filter_and_merge <- function(disc_wide, valid_wide, endpoint) {
  # Filter both discovery and validation datasets using the helper function.
  disc_filtered <- filter_data(disc_wide, endpoint)
  valid_filtered <- filter_data(valid_wide, endpoint)
  
  # Find common pathways between discovery and validation results.
  common <- inner_join(disc_filtered, valid_filtered, by = "Pathway", suffix = c("_D", "_V"))
  
  # Sort the results by the discovery hazard ratio.
  common <- common %>% arrange(as.numeric(get(paste0("HR_", endpoint, "_D"))))
  
  # Rename columns for clarity.
  common <- common %>% rename(
    HR_D.ER = paste0("HR_", endpoint, "_D"),
    Pvalue_D.ER = paste0("Pvalue_", endpoint, "_D"),
    HR_V.ER = paste0("HR_", endpoint, "_V"),
    Pvalue_V.ER = paste0("Pvalue_", endpoint, "_V")
  )
  
  return(common)
}

###############################
# 6. Create Excel Workbook with ER-specific Sheets
###############################
# Create a new Excel workbook object.
wb <- createWorkbook()

# Define the survival endpoints to process.
endpoint_list <- c("OS", "DSS", "RFS", "MFS")

# Loop over each endpoint and add two worksheets (one for ER-positive and one for ER-negative).
for (endpoint in endpoint_list) {
  # Process ER-positive results.
  final_Pos <- filter_and_merge(results_Pos_disc_wide, results_Pos_valid_wide, endpoint)
  sheet_name_pos <- paste0(endpoint, "_ERpos")
  addWorksheet(wb, sheet_name_pos)
  writeData(wb, sheet_name_pos, final_Pos)
  
  # Process ER-negative results.
  final_Neg <- filter_and_merge(results_Neg_disc_wide, results_Neg_valid_wide, endpoint)
  sheet_name_neg <- paste0(endpoint, "_ERneg")
  addWorksheet(wb, sheet_name_neg)
  writeData(wb, sheet_name_neg, final_Neg)
}

###############################
# 7. Combine MD Data with Survival Results and Add as a New Sheet in the Existing Workbook
###############################
# Convert the MD data (which is a matrix) to a data frame and add the hallmark names as a column.
MD_df <- MD %>% rownames_to_column(var = "Hallmarks")

# Initialize new columns for survival metrics for each endpoint for both discovery (D) and validation (V).
for (ep in endpoint_list) {
  MD_df[[paste0("D.", ep, ".HR")]] <- NA
  MD_df[[paste0("D.", ep, ".Pvalue")]] <- NA
  MD_df[[paste0("V.", ep, ".HR")]] <- NA
  MD_df[[paste0("V.", ep, ".Pvalue")]] <- NA
}

# Create a new column that assigns a 'sign' based on MD values:
# If both D.MD and V.MD are > 0, assign "positive";
# if both are < 0, assign "negative"; otherwise, NA.
MD_df <- MD_df %>% mutate(
  sign = case_when(
    `D.MD` > 0 & `V.MD` > 0 ~ "positive",
    `D.MD` < 0 & `V.MD` < 0 ~ "negative",
    TRUE ~ NA_character_
  )
)

# Helper function to extract survival estimates for a given hallmark and endpoint based on its sign.
get_surv_values <- function(hallmark, endpoint, sign,
                            disc_pos, disc_neg, valid_pos, valid_neg) {
  if (sign == "positive") {
    disc_row <- disc_pos %>% filter(Pathway == hallmark)
    valid_row <- valid_pos %>% filter(Pathway == hallmark)
  } else if (sign == "negative") {
    disc_row <- disc_neg %>% filter(Pathway == hallmark)
    valid_row <- valid_neg %>% filter(Pathway == hallmark)
  } else {
    disc_row <- tibble()
    valid_row <- tibble()
  }
  
  # Extract HR and p-value from the appropriate row; if not found, assign NA.
  disc_hr <- if(nrow(disc_row) > 0) disc_row[[paste0("HR_", endpoint)]] else NA
  disc_p  <- if(nrow(disc_row) > 0) disc_row[[paste0("Pvalue_", endpoint)]] else NA
  valid_hr <- if(nrow(valid_row) > 0) valid_row[[paste0("HR_", endpoint)]] else NA
  valid_p  <- if(nrow(valid_row) > 0) valid_row[[paste0("Pvalue_", endpoint)]] else NA
  
  return(c(disc_hr, disc_p, valid_hr, valid_p))
}

# Loop over each hallmark and each endpoint to populate the survival metrics.
for (i in seq_len(nrow(MD_df))) {
  hall <- MD_df$Hallmarks[i]
  current_sign <- MD_df$sign[i]
  
  for (ep in endpoint_list) {
    surv_vals <- get_surv_values(hall, ep, current_sign,
                                 results_Pos_disc_wide, results_Neg_disc_wide,
                                 results_Pos_valid_wide, results_Neg_valid_wide)
    MD_df[i, paste0("D.", ep, ".HR")] <- surv_vals[1]
    MD_df[i, paste0("D.", ep, ".Pvalue")] <- surv_vals[2]
    MD_df[i, paste0("V.", ep, ".HR")] <- surv_vals[3]
    MD_df[i, paste0("V.", ep, ".Pvalue")] <- surv_vals[4]
  }
}

# Remove the helper 'sign' column as it is no longer needed.
final_combined_df <- MD_df %>% select(-sign)

# Reorder columns to match the desired output format:
# Hallmarks, D.MD, then for each endpoint: D.[endpoint].HR, D.[endpoint].Pvalue,
# followed by V.MD, then V.[endpoint].HR, V.[endpoint].Pvalue
final_combined_df <- final_combined_df %>%
  select(Hallmarks, `D.MD`,
         paste0("D.", endpoint_list, ".HR"), paste0("D.", endpoint_list, ".Pvalue"),
         `V.MD`,
         paste0("V.", endpoint_list, ".HR"), paste0("V.", endpoint_list, ".Pvalue"))

# Add the combined MD data as a new worksheet in the existing workbook.
addWorksheet(wb, "Combined_Hallmark_Results")
writeData(wb, "Combined_Hallmark_Results", final_combined_df)

###############################
# 8. Create a New Sheet with Only Significant Survival Values
###############################
# Make a copy of the combined data to filter based on p-values.
filtered_combined_df <- final_combined_df

# Loop through each endpoint and for both discovery (D) and validation (V) set non-significant values to NA.
for (ep in endpoint_list) {
  # For discovery columns:
  p_col_D <- paste0("D.", ep, ".Pvalue")
  hr_col_D <- paste0("D.", ep, ".HR")
  # Set HR and p-value to NA if the p-value is not less than 0.05.
  filtered_combined_df[[hr_col_D]][ as.numeric(filtered_combined_df[[p_col_D]]) >= 0.05 ] <- NA
  filtered_combined_df[[p_col_D]][ as.numeric(filtered_combined_df[[p_col_D]]) >= 0.05 ] <- NA
  
  # For validation columns:
  p_col_V <- paste0("V.", ep, ".Pvalue")
  hr_col_V <- paste0("V.", ep, ".HR")
  filtered_combined_df[[hr_col_V]][ as.numeric(filtered_combined_df[[p_col_V]]) >= 0.05 ] <- NA
  filtered_combined_df[[p_col_V]][ as.numeric(filtered_combined_df[[p_col_V]]) >= 0.05 ] <- NA
}

# Add this filtered data as a new worksheet in the existing workbook.
addWorksheet(wb, "Filtered_Combined_Results")
writeData(wb, "Filtered_Combined_Results", filtered_combined_df)

###############################
# 9. Save the Workbook and Workspace
###############################
# Save the Excel workbook (which now contains all ER-specific sheets, the combined MD data sheet,
# and the filtered sheet with only significant p-values)
saveWorkbook(wb, file = paste0("Common_Hallmark.HR_ER_", Sys.Date(), ".xlsx"), overwrite = TRUE)

# Optionally, save the entire workspace for future reference.
save(list = ls(), file = paste0("Common_Hallmark.HR_ER_", Sys.Date(), ".RData"))

# Print confirmation message.
print("Processing complete. Excel file saved with all sheets including the filtered significant results sheet.")



########################################################################
# For BubblePlot: Second part of the code
#Section 0: Load Libraries (same as before)
########################################################################
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)    # for combining plots
library(ggforce)    # for custom annotations if needed
library(ggtext)     # for rich text x-axis labels
library(grid)       # for grobs


########################################################################
# Section 1: Load Data obtained from 1-Hallmark.HR
########################################################################

load("E:/2.ER/3.Hallmarks/6.HR.Bubble.Plot/Common_Hallmark.HR_ER_2025-04-06.RData")

########################################################################
# Section 2: Define ER Grouping Based on MD Values
########################################################################
# Here, we assign an overall ER status based on both discovery and validation MD values.
final_combined_df <- final_combined_df %>%
  mutate(
    ER_Status = case_when(
      D.MD >= 0 & V.MD >= 0 ~ "ERpos",
      D.MD < 0  & V.MD < 0  ~ "ERneg",
      TRUE                 ~ "Common"
    )
  )

########################################################################
# Section 3: Define a Function to Process Each Survival Type
########################################################################
# This function filters for significant p-values (p < 0.05 in both discovery and validation)
# and computes the average HR and a flag for drawing the grey square.
process_survival_type <- function(data, survival_type) {
  # Define the column names based on the survival type.
  p_col_disc <- paste0("D.", survival_type, ".Pvalue")
  p_col_val  <- paste0("V.", survival_type, ".Pvalue")
  hr_col_disc <- paste0("D.", survival_type, ".HR")
  hr_col_val  <- paste0("V.", survival_type, ".HR")
  
  # Filter rows with significant p-values in both discovery and validation.
  data_filtered <- data %>%
    filter(!!sym(p_col_disc) < 0.05, !!sym(p_col_val) < 0.05)
  
  # Compute average HR, maximum p-value, and define HR statuses.
  data_filtered <- data_filtered %>%
    mutate(
      Avg_HR = ( !!sym(hr_col_disc) + !!sym(hr_col_val) ) / 2,
      Max_Pvalue = pmax( !!sym(p_col_disc), !!sym(p_col_val) ),
      HR_status_disc = ifelse( !!sym(hr_col_disc) >= 1, "HR>=1", "HR<1"),
      HR_status_val  = ifelse( !!sym(hr_col_val)  >= 1, "HR>=1", "HR<1"),
      # Set Grey_Square flag:
      # TRUE if both HR values are <1; FALSE if both are >=1; NA otherwise.
      Grey_Square = ifelse(HR_status_disc == "HR<1" & HR_status_val == "HR<1", TRUE,
                           ifelse(HR_status_disc == "HR>=1" & HR_status_val == "HR>=1", FALSE, NA))
    ) %>%
    mutate(Survival = survival_type)
  
  return(data_filtered)
}

########################################################################
# Section 4: Process Data for Each Survival Type
########################################################################
data_OS  <- process_survival_type(final_combined_df, "OS")
data_DSS <- process_survival_type(final_combined_df, "DSS")
data_RFS <- process_survival_type(final_combined_df, "RFS")
data_MFS <- process_survival_type(final_combined_df, "MFS")

# Combine all survival type results into one data frame.
combined_results <- bind_rows(data_OS, data_DSS, data_RFS, data_MFS)

########################################################################
# Section 6: Prepare Plot Data and Create the Bubble Plot
########################################################################
# Ensure that all Hallmarkss appear on the x-axis in sorted order.
all_Hallmarkss <- sort(unique(combined_results$Hallmarks))
combined_results$Hallmarks <- factor(combined_results$Hallmarks, levels = all_Hallmarkss)

# Define manual colors for ER groups (including "Common").
er_colors <- c("ERpos" = "steelblue", "ERneg" = "violet", "Common" = "yellow")

# Create a size metric from the maximum p-value using -log10.
combined_results <- combined_results %>%
  mutate(SizeMetric = -log10(Max_Pvalue),
         SizeMetric2 = SizeMetric * 1.5)

# Build the base bubble plot.
p <- ggplot(combined_results, aes(x = Hallmarks, y = Survival)) +
  geom_point(aes(size = SizeMetric, color = ER_Status), shape = 16, fill = NA) +
  scale_color_manual(values = er_colors) +
  scale_size_continuous(name = "-log (P-value)", range = c(1, 10)) +
  #box around the plot
  #scale_y_discrete(expand = c(0, 0)) +  # Remove padding on y-axis
  #scale_x_discrete(expand = c(0, 0)) +  # Remove padding on x-axis
  labs(x = "Hallmarks", y = "Survival Type", color = "ER Status") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10, angle = 90, hjust = 1),
    axis.title.x = element_text(hjust = 0.5, vjust = -1, size = 14), #hallmarks size in the plot
    axis.title.y = element_text(hjust = 0.5, vjust = 1, angle = 90),
    plot.margin = margin(t = 3, r = 3, b = 3, l = 3)
  ) +
  guides(color = guide_legend(order = 1), size = guide_legend(order = 2)) #+
  #coord_cartesian(clip = "off")  # Allow points to be clipped outside the plot area

# Overlay grey square outlines for Hallmarkss with a Grey_Square flag TRUE.
p <- p + geom_point(data = subset(combined_results, !is.na(Grey_Square) & Grey_Square == TRUE),
                    aes(x = Hallmarks, y = Survival, size = SizeMetric2),
                    shape = 22, fill = NA, color = "grey", stroke = 2,
                    show.legend = FALSE)

########################################################################
# Section 7: (Optional) Custom Legend for the Grey Square
########################################################################
legend_plot <- ggdraw() + 
  draw_label("HR<1", x = 0.943, y = 5.28, size = 10, fontface = "italic") +  #less y upper
  draw_grob(rectGrob(gp = gpar(col = "grey", fill = NA, lwd = 3)), 
            x = 0.895, y = 5.15, width = 0.02, height = 0.3)

# Combine the main plot and custom legend.
final_plot <- plot_grid(p, legend_plot, ncol = 1, rel_heights = c(1, 0.1))
final_plot

########################################################################
# Section 8: Save the Plot and Session Info
########################################################################
ggsave(filename = paste0("Hallmark_HR_ER_", Sys.Date(), ".TIFF"), 
       plot = final_plot, width = 10, height = 8)

se <- sessionInfo()
save(list = ls(), file = paste0("Hallmark_HR_ER_", Sys.Date(), ".RData"))
